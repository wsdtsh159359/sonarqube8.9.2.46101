// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should display action state correctly 1`] = `
<div>
  <header
    className="page-header"
  >
    <h1
      className="page-title"
    >
      settings.pr_decoration.binding.title
    </h1>
  </header>
  <div
    className="markdown small spacer-top big-spacer-bottom"
  >
    settings.pr_decoration.binding.description
  </div>
  <form
    onSubmit={[Function]}
  >
    <MandatoryFieldsExplanation
      className="form-field"
    />
    <div
      className="form-field"
    >
      <label
        htmlFor="name"
      >
        settings.pr_decoration.binding.form.name
        <MandatoryFieldMarker
          className="spacer-right"
        />
      </label>
      <Select
        autosize={true}
        className="abs-width-400"
        clearable={false}
        id="name"
        menuContainerStyle={
          Object {
            "maxWidth": "210%",
            "width": "auto",
          }
        }
        onChange={[Function]}
        optionRenderer={[Function]}
        options={
          Array [
            Object {
              "alm": "github",
              "key": "key",
              "url": "http://url.com",
            },
          ]
        }
        searchable={false}
        value=""
        valueKey="key"
        valueRenderer={[Function]}
      />
    </div>
    <div
      className="display-flex-center"
    >
      <DeferredSpinner
        className="spacer-right"
        loading={true}
      />
    </div>
  </form>
</div>
`;

exports[`should display action state correctly 2`] = `
<div>
  <header
    className="page-header"
  >
    <h1
      className="page-title"
    >
      settings.pr_decoration.binding.title
    </h1>
  </header>
  <div
    className="markdown small spacer-top big-spacer-bottom"
  >
    settings.pr_decoration.binding.description
  </div>
  <form
    onSubmit={[Function]}
  >
    <MandatoryFieldsExplanation
      className="form-field"
    />
    <div
      className="form-field"
    >
      <label
        htmlFor="name"
      >
        settings.pr_decoration.binding.form.name
        <MandatoryFieldMarker
          className="spacer-right"
        />
      </label>
      <Select
        autosize={true}
        className="abs-width-400"
        clearable={false}
        id="name"
        menuContainerStyle={
          Object {
            "maxWidth": "210%",
            "width": "auto",
          }
        }
        onChange={[Function]}
        optionRenderer={[Function]}
        options={
          Array [
            Object {
              "alm": "github",
              "key": "key",
              "url": "http://url.com",
            },
          ]
        }
        searchable={false}
        value=""
        valueKey="key"
        valueRenderer={[Function]}
      />
    </div>
    <div
      className="display-flex-center"
    >
      <DeferredSpinner
        className="spacer-right"
        loading={false}
      />
      <span
        className="text-success"
      >
        <AlertSuccessIcon
          className="spacer-right"
        />
        settings.state.saved
      </span>
    </div>
  </form>
</div>
`;

exports[`should display action state correctly 3`] = `
<div>
  <header
    className="page-header"
  >
    <h1
      className="page-title"
    >
      settings.pr_decoration.binding.title
    </h1>
  </header>
  <div
    className="markdown small spacer-top big-spacer-bottom"
  >
    settings.pr_decoration.binding.description
  </div>
  <form
    onSubmit={[Function]}
  >
    <MandatoryFieldsExplanation
      className="form-field"
    />
    <div
      className="form-field"
    >
      <label
        htmlFor="name"
      >
        settings.pr_decoration.binding.form.name
        <MandatoryFieldMarker
          className="spacer-right"
        />
      </label>
      <Select
        autosize={true}
        className="abs-width-400"
        clearable={false}
        id="name"
        menuContainerStyle={
          Object {
            "maxWidth": "210%",
            "width": "auto",
          }
        }
        onChange={[Function]}
        optionRenderer={[Function]}
        options={
          Array [
            Object {
              "alm": "github",
              "key": "key",
              "url": "http://url.com",
            },
          ]
        }
        searchable={false}
        value=""
        valueKey="key"
        valueRenderer={[Function]}
      />
    </div>
    <div
      className="display-flex-center"
    >
      <DeferredSpinner
        className="spacer-right"
        loading={false}
      />
    </div>
  </form>
</div>
`;

exports[`should render correctly 1`] = `<DeferredSpinner />`;

exports[`should render correctly 2`] = `
<div>
  <Alert
    className="spacer-top huge-spacer-bottom"
    variant="info"
  >
    <FormattedMessage
      defaultMessage="settings.pr_decoration.binding.no_bindings"
      id="settings.pr_decoration.binding.no_bindings"
      values={
        Object {
          "link": <Link
            onlyActiveOnIndex={false}
            style={Object {}}
            to="/documentation/analysis/pull-request/#pr-decoration"
          >
            learn_more
          </Link>,
        }
      }
    />
  </Alert>
</div>
`;

exports[`should render multiple instances correctly 1`] = `
<div>
  <header
    className="page-header"
  >
    <h1
      className="page-title"
    >
      settings.pr_decoration.binding.title
    </h1>
  </header>
  <div
    className="markdown small spacer-top big-spacer-bottom"
  >
    settings.pr_decoration.binding.description
  </div>
  <form
    onSubmit={[Function]}
  >
    <MandatoryFieldsExplanation
      className="form-field"
    />
    <div
      className="form-field"
    >
      <label
        htmlFor="name"
      >
        settings.pr_decoration.binding.form.name
        <MandatoryFieldMarker
          className="spacer-right"
        />
      </label>
      <Select
        autosize={true}
        className="abs-width-400"
        clearable={false}
        id="name"
        menuContainerStyle={
          Object {
            "maxWidth": "210%",
            "width": "auto",
          }
        }
        onChange={[Function]}
        optionRenderer={[Function]}
        options={
          Array [
            Object {
              "alm": "github",
              "key": "i1",
              "url": "http://github.enterprise.com",
            },
            Object {
              "alm": "github",
              "key": "i2",
              "url": "http://github.enterprise.com",
            },
            Object {
              "alm": "bitbucket",
              "key": "i3",
              "url": "http://bbs.enterprise.com",
            },
            Object {
              "alm": "azure",
              "key": "i4",
            },
          ]
        }
        searchable={false}
        value=""
        valueKey="key"
        valueRenderer={[Function]}
      />
    </div>
    <div
      className="display-flex-center"
    >
      <DeferredSpinner
        className="spacer-right"
        loading={false}
      />
    </div>
  </form>
</div>
`;

exports[`should render multiple instances correctly 2`] = `
<div>
  <header
    className="page-header"
  >
    <h1
      className="page-title"
    >
      settings.pr_decoration.binding.title
    </h1>
  </header>
  <div
    className="markdown small spacer-top big-spacer-bottom"
  >
    settings.pr_decoration.binding.description
  </div>
  <form
    onSubmit={[Function]}
  >
    <MandatoryFieldsExplanation
      className="form-field"
    />
    <div
      className="form-field"
    >
      <label
        htmlFor="name"
      >
        settings.pr_decoration.binding.form.name
        <MandatoryFieldMarker
          className="spacer-right"
        />
      </label>
      <Select
        autosize={true}
        className="abs-width-400"
        clearable={false}
        id="name"
        menuContainerStyle={
          Object {
            "maxWidth": "210%",
            "width": "auto",
          }
        }
        onChange={[Function]}
        optionRenderer={[Function]}
        options={
          Array [
            Object {
              "alm": "github",
              "key": "i1",
              "url": "http://github.enterprise.com",
            },
            Object {
              "alm": "github",
              "key": "i2",
              "url": "http://github.enterprise.com",
            },
            Object {
              "alm": "bitbucket",
              "key": "i3",
              "url": "http://bbs.enterprise.com",
            },
            Object {
              "alm": "azure",
              "key": "i4",
            },
          ]
        }
        searchable={false}
        value="i1"
        valueKey="key"
        valueRenderer={[Function]}
      />
    </div>
    <AlmSpecificForm
      alm="github"
      formData={
        Object {
          "key": "i1",
          "monorepo": false,
          "repository": "account/repo",
        }
      }
      monorepoEnabled={false}
      onFieldChange={[MockFunction]}
    />
    <div
      className="display-flex-center"
    >
      <DeferredSpinner
        className="spacer-right"
        loading={false}
      />
      <Button
        className="spacer-right"
        onClick={[MockFunction]}
      >
        <span
          data-test="project-settings__alm-reset"
        >
          reset_verb
        </span>
      </Button>
    </div>
  </form>
</div>
`;

exports[`should render select options correctly 1`] = `
<span>
  azure
</span>
`;

exports[`should render select options correctly 2`] = `
<React.Fragment>
  <span>
    github
     â€” 
  </span>
  <span
    className="text-muted"
  >
    gh.url.com
  </span>
</React.Fragment>
`;

exports[`should render single instance correctly 1`] = `
<div>
  <header
    className="page-header"
  >
    <h1
      className="page-title"
    >
      settings.pr_decoration.binding.title
    </h1>
  </header>
  <div
    className="markdown small spacer-top big-spacer-bottom"
  >
    settings.pr_decoration.binding.description
  </div>
  <form
    onSubmit={[Function]}
  >
    <MandatoryFieldsExplanation
      className="form-field"
    />
    <div
      className="form-field"
    >
      <label
        htmlFor="name"
      >
        settings.pr_decoration.binding.form.name
        <MandatoryFieldMarker
          className="spacer-right"
        />
      </label>
      <Select
        autosize={true}
        className="abs-width-400"
        clearable={false}
        id="name"
        menuContainerStyle={
          Object {
            "maxWidth": "210%",
            "width": "auto",
          }
        }
        onChange={[Function]}
        optionRenderer={[Function]}
        options={
          Array [
            Object {
              "alm": "github",
              "key": "single",
              "url": "http://single.url",
            },
          ]
        }
        searchable={false}
        value=""
        valueKey="key"
        valueRenderer={[Function]}
      />
    </div>
    <div
      className="display-flex-center"
    >
      <DeferredSpinner
        className="spacer-right"
        loading={false}
      />
    </div>
  </form>
</div>
`;
