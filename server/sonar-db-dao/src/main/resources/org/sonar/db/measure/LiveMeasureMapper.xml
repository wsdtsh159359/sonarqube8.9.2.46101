<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.db.measure.LiveMeasureMapper">

  <sql id="columns">
    lm.component_uuid as componentUuid,
    lm.project_uuid as projectUuid,
    lm.metric_uuid as metricUuid,
    lm.value as value,
    lm.text_value as textValue,
    lm.measure_data as data,
    lm.variation as variation
  </sql>

  <select id="selectByComponentUuidsAndMetricUuids" parameterType="map" resultType="org.sonar.db.measure.LiveMeasureDto">
    select <include refid="columns"/> from live_measures lm
    where
    lm.metric_uuid in <foreach item="metricUuid" collection="metricUuids" open="(" separator=","
                               close=")">#{metricUuid, jdbcType=VARCHAR}</foreach>
    and lm.component_uuid in
    <foreach item="componentUuid" collection="componentUuids" open="(" separator="," close=")">
      #{componentUuid, jdbcType=VARCHAR}
    </foreach>
  </select>

  <select id="selectByComponentUuidsAndMetricKeys" parameterType="map" resultType="org.sonar.db.measure.LiveMeasureDto">
    select <include refid="columns"/> from live_measures lm
    inner join metrics m on m.uuid = lm.metric_uuid
    where
    m.name in <foreach item="metricKey" collection="metricKeys" open="(" separator="," close=")">#{metricKey, jdbcType=VARCHAR}</foreach>
    and lm.component_uuid in
    <foreach item="componentUuid" collection="componentUuids" open="(" separator="," close=")">
      #{componentUuid, jdbcType=VARCHAR}
    </foreach>
  </select>

    <select id="selectByComponentUuidAndMetricKeys" parameterType="map" resultType="org.sonar.db.measure.LiveMeasureDto">
    select <include refid="columns"/> from live_measures lm
    inner join metrics m on m.uuid = lm.metric_uuid
    where
    m.name in <foreach item="metricKey" collection="metricKeys" open="(" separator="," close=")">#{metricKey, jdbcType=VARCHAR}</foreach>
    and lm.component_uuid = #{componentUuid, jdbcType=VARCHAR}
  </select>

  <select id="selectByComponentUuidAndMetricKey" parameterType="map" resultType="org.sonar.db.measure.LiveMeasureDto">
    select <include refid="columns"/> from live_measures lm
    inner join metrics m on m.uuid = lm.metric_uuid
    where
    m.name = #{metricKey, jdbcType=VARCHAR}
    and lm.component_uuid = #{componentUuid, jdbcType=VARCHAR}
  </select>

  <select id="sumNclocOfBiggestBranch" parameterType="map" resultType="long">
    select sum(sumncloc.maxncloc) from (
      select b.project_uuid as projectUuid, max(lm.value) as maxncloc
      from live_measures lm
      inner join metrics m on m.uuid = lm.metric_uuid
      inner join project_branches b on b.uuid = lm.component_uuid and b.branch_type = #{branchType, jdbcType=VARCHAR}
      inner join projects p on p.uuid = b.project_uuid and p.qualifier = 'TRK'
      <where>
        m.name = #{ncloc, jdbcType=VARCHAR}
        <if test="private">
          and p.private=${_true}
        </if>
        <if test="projectUuidToExclude != null">
          and b.project_uuid &lt;&gt; #{projectUuidToExclude,jdbcType=VARCHAR}
        </if>
      </where>
      group by b.project_uuid
    ) sumncloc
  </select>

  <select id="countProjectsHavingMeasure" parameterType="map" resultType="long">
    select count(1)
      from live_measures lm
      inner join metrics m on m.uuid = lm.metric_uuid AND m.name = #{metric, jdbcType=VARCHAR}
      inner join projects p on p.uuid = lm.component_uuid and p.qualifier = 'TRK'
  </select>

  <insert id="insert" parameterType="map" useGeneratedKeys="false">
    insert into live_measures (
    uuid,
    component_uuid,
    project_uuid,
    metric_uuid,
    value,
    text_value,
    variation,
    measure_data,
    created_at,
    updated_at
    ) values (
    #{uuid, jdbcType=VARCHAR},
    #{dto.componentUuid, jdbcType=VARCHAR},
    #{dto.projectUuid, jdbcType=VARCHAR},
    #{dto.metricUuid, jdbcType=VARCHAR},
    #{dto.value, jdbcType=DOUBLE},
    #{dto.textValue, jdbcType=VARCHAR},
    #{dto.variation, jdbcType=DOUBLE},
    #{dto.data, jdbcType=BINARY},
    #{now, jdbcType=BIGINT},
    #{now, jdbcType=BIGINT}
    )
  </insert>

  <update id="update" parameterType="map">
    update live_measures set
    value = #{dto.value, jdbcType=DOUBLE},
    variation = #{dto.variation, jdbcType=DOUBLE},
    text_value = #{dto.textValue, jdbcType=VARCHAR},
    measure_data  = #{dto.data, jdbcType=BINARY},
    updated_at = #{now, jdbcType=BIGINT}
    where
    component_uuid = #{dto.componentUuid, jdbcType=VARCHAR}
    and metric_uuid = #{dto.metricUuid, jdbcType=VARCHAR}
  </update>

  <delete id="deleteByComponent" parameterType="map">
    delete from live_measures
    where
      component_uuid = #{componentUuid, jdbcType=VARCHAR}
  </delete>

  <update id="upsert" parameterType="map" useGeneratedKeys="false" databaseId="postgresql">
    insert into live_measures (
      uuid,
      component_uuid,
      project_uuid,
      metric_uuid,
      value,
      text_value,
      variation,
      measure_data,
      created_at,
      updated_at
    ) values (
      #{dto.uuidForUpsert, jdbcType=VARCHAR},
      #{dto.componentUuid, jdbcType=VARCHAR},
      #{dto.projectUuid, jdbcType=VARCHAR},
      #{dto.metricUuid, jdbcType=VARCHAR},
      #{dto.value, jdbcType=DOUBLE},
      #{dto.textValue, jdbcType=VARCHAR},
      #{dto.variation, jdbcType=DOUBLE},
      #{dto.data, jdbcType=BINARY},
      #{now, jdbcType=BIGINT},
      #{now, jdbcType=BIGINT}
    )
    on conflict(component_uuid, metric_uuid) do update set
      value = excluded.value,
      variation = excluded.variation,
      text_value = excluded.text_value,
      measure_data  = excluded.measure_data,
      updated_at = excluded.updated_at
    where
      live_measures.value is distinct from excluded.value or
      live_measures.variation is distinct from excluded.variation or
      live_measures.text_value is distinct from excluded.text_value or
      live_measures.measure_data is distinct from excluded.measure_data
  </update>

  <delete id="deleteByComponentUuidExcludingMetricUuids" parameterType="map">
    <include refid="sql_deleteByComponentUuidExcludingMetricUuids"/>
  </delete>

  <sql id="sql_deleteByComponentUuidExcludingMetricUuids">
    delete from live_measures
    where
      component_uuid = #{componentUuid, jdbcType=VARCHAR}
      <if test="!excludedMetricUuids.isEmpty()">
      and metric_uuid not in <foreach collection="excludedMetricUuids" item="metricUuid" open="(" close=")" separator=",">#{metricUuid,jdbcType=VARCHAR}</foreach>
      </if>
  </sql>

  <select id="scrollSelectByComponentUuidAndMetricKeys" resultType="org.sonar.db.measure.LiveMeasureDto" fetchSize="${_scrollFetchSize}"
          resultSetType="FORWARD_ONLY">
     select <include refid="columns"/> from live_measures lm
     inner join metrics m on m.uuid = lm.metric_uuid
     where
     m.name in <foreach item="metricKey" collection="metricKeys" open="(" separator="," close=")">#{metricKey, jdbcType=VARCHAR}</foreach>
     and lm.component_uuid = #{componentUuid, jdbcType=VARCHAR}
  </select>

  <select id="selectTreeByQuery" parameterType="map" resultType="org.sonar.db.measure.LiveMeasureDto" fetchSize="${_scrollFetchSize}"
          resultSetType="FORWARD_ONLY">
    select <include refid="columns"/> from live_measures lm
    inner join components p on p.uuid = lm.component_uuid
    <!-- TODO do we really need another join on components ? Using lm.project_uuid should be enough -->
    <include refid="org.sonar.db.component.ComponentMapper.selectDescendantsJoins"/>
    <where>
      <if test="query.getMetricUuids() != null">
        lm.metric_uuid in
        <foreach item="metricUuid" collection="query.getMetricUuids()" open="(" separator=","
                 close=")">#{metricUuid,jdbcType=VARCHAR}</foreach>
      </if>
      and p.enabled = ${_true}
      <if test="query.qualifiers != null">
        and p.qualifier in
        <foreach collection="query.qualifiers" item="qualifier" open="(" close=")" separator=",">
          #{qualifier,jdbcType=VARCHAR}
        </foreach>
      </if>
      <if test="query.nameOrKeyQuery != null">
        and (
        p.kee = #{query.nameOrKeyQuery,jdbcType=VARCHAR}
        or
        upper(p.name) like #{query.nameOrKeyUpperLikeQuery,jdbcType=VARCHAR} escape '/'
        )
      </if>
    </where>

    -- Add measures of base component
    union all
    select <include refid="columns"/> from live_measures lm
    inner join components p on p.uuid = lm.component_uuid and lm.component_uuid = #{baseUuid, jdbcType=VARCHAR}
    <where>
      <if test="query.getMetricUuids() != null">
        lm.metric_uuid in
        <foreach item="metricUuid" collection="query.getMetricUuids()" open="(" separator=","
                 close=")">#{metricUuid,jdbcType=VARCHAR}</foreach>
      </if>
      and p.enabled = ${_true}
      <if test="query.qualifiers != null">
        and p.qualifier in
        <foreach collection="query.qualifiers" item="qualifier" open="(" close=")" separator=",">
          #{qualifier,jdbcType=VARCHAR}
        </foreach>
      </if>
      <if test="query.nameOrKeyQuery != null">
        and (
        p.kee = #{query.nameOrKeyQuery,jdbcType=VARCHAR}
        or
        upper(p.name) like #{query.nameOrKeyUpperLikeQuery,jdbcType=VARCHAR} escape '/'
        )
      </if>
    </where>
  </select>
</mapper>
